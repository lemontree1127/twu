import plotly
import plotly.express as px

import pandas as pd
import dash
from dash import dcc
#from dash import html
import dash_html_components as html
#from dash import Dash
from dash.dependencies import Input, Output  
from pathlib import Path

# create a Path instance and filter for only csv files
files = Path("D:/CPSProject").rglob("*.csv")

# read in all the csv files
data = [pd.read_csv(file) for file in files]

# lump into one table
data = pd.concat(data)

# replace the code to city and country
data = data.replace({
# City
49180:'Winston-Salem,NC',
12020:'Athens-ClarkCounty,GA',
12540:'Bakersfield,CA',
13820:'Birmingham-Hoover,AL',
29540:'Lancaster,PA',
36500:'Olympia,WA',
71650:'Boston-Cambridge-Quincy,MA-NH',
33340:'Milwaukee-Waukesha-WestAllis,WI',
11300:'Anderson,IN',
17860:'Columbia,MO',
21660:'Eugene-Springfield,OR',
26100:'Holland-GrandHaven,MI',
14540:'BowlingGreen,KY',
19340:'Davenport-Moline-RockIsland,IA-IL',
39340:'Provo-Orem,UT',
43780:'SouthBend-Mishawaka,IN-MI',
75550:'NewBedford,MA',
25980:'Hinesville-FortStewart,GA',
36740:'Orlando,FL',
40900:'Sacramento--Arden-ArcadeRoseville,CA',
43340:'Shreveport-BossierCity,LA',
76450:'Norwich-NewLondon,CT-RI',
12420:'Austin-RoundRock,TX',
27100:'Jackson,MI',
29460:'Lakeland-WinterHaven,FL',
37340:'PalmBay-Melbourne-Titusville,FL',
77200:'Providence-FallRiver-Warwick,MA-RI',
3000:'GrandRapids-Muskegon-Holland,MIMSA*',
29940:'Lawrence,KS',
34980:'Nashville-Davidson-Murfreesboro,TN',
41700:'SanAntonio,TX',
46940:'VeroBeach,FL',
16580:'Champaign-Urbana,IL',
23540:'Gainesville,FL',
33660:'Mobile,AL',
34900:'Napa,CA',
73450:'Hartford-WestHartford-EastHartford,CT',
10900:'Allentown-Bethlehem-Easton,PA-NJ',
29820:'LasVegas-Paradise,NV',
36100:'Ocala,FL',
41860:'SanFrancisco-Oakland-Fremont,CA',
45780:'Toledo,OH',
16740:'Charlotte-Gastonia-Concord,NC-SC',
31180:'Lubbock,TX',
48620:'Wichita,KS',
44180:'Springfield,MO',
47380:'Waco,TX',
26420:'Houston-Baytown-SugarLand,TX',
28020:'Kalamazoo-Portage,MI',
21500:'Erie,PA',
22420:'Flint,MI',
44100:'Springfield,IL',
71950:'Bridgeport-Stamford-Norwalk,CT',
41060:'St.Cloud,MN',
3720:'Kalamazoo-BattleCreek,MIMSA*',
10580:'Albany-Schenectady-Troy,NY',
30460:'Lexington-Fayette,KY',
37860:'Pensacola-FerryPass-Brent,FL',
39100:'Poughkeepsie-Newburgh-Middletown,NY',
39740:'Reading,PA',
40220:'Roanoke,VA',
41180:'St.Louis,MO-IL',
42060:'SantaBarbara-SantaMaria-Goleta,CA',
43620:'SiouxFalls,SD',
3610:'Jamestown,NYMSA*',
22660:'FortCollins-Loveland,CO',
30020:'Lawton,OK',
39380:'Pueblo,CO',
41420:'Salem,OR',
11100:'Amarillo,TX',
37100:'Oxnard-ThousandOaks-Ventura,CA',
40060:'Richmond,VA',
42140:'SantaFe,NM',
78700:'Waterbury,CT',
11260:'Anchorage,AK',
11340:'Anderson,SC',
19820:'Detroit-Warren-Livonia,MI',
32780:'Medford,OR',
34820:'MyrtleBeach-Conway-NorthMyrtleBeach,SC',
13380:'Bellingham,WA',
47260:'VirginiaBeach-Norfolk-NewportNews,VA-NC',
76750:'Portland-SouthPortland,ME',
42020:'SanLuisObispo-PasoRobles,CA',
74500:'Leominster-Fitchburg-Gardner,MA',
20260:'Duluth,MN-WI',
28940:'Knoxville,TN',
30980:'Longview,TX',
20100:'Dover,DE',
23020:'FortWaltonBeach-Crestview-Destin,FL',
23060:'FortWayne,IN',
29740:'LasCruses,NM',
46660:'Valdosta,GA',
10420:'Akron,OH',
31540:'Madison,WI',
46540:'Utica-Rome,NY',
77350:'Rochester-Dover,NH-ME',
21340:'ElPaso,TX',
36140:'OceanCity,NJ',
24780:'Greenville,NC',
36540:'Omaha-CouncilBluffs,NE-IA',
79600:'Worcester,MA-CT',
29180:'Lafayette,LA',
40140:'Riverside-SanBernardino,CA',
460:'Appleton-Oshkosh-Neenah,WIMSA*',
17660:'Coeurd Alene,ID',
19780:'DesMoines,IA',
24580:'GreenBay,WI',
27140:'Jackson,MS',
29700:'Laredo,TX',
41620:'SaltLakeCity,UT',
42660:'Seattle-Tacoma-Bellevue,WA',
46220:'Tuscaloosa,AL',
47580:'WarnerRobins,GA',
37460:'PanamaCity-LynnHaven,FL',
16300:'CedarRapids,IA',
21780:'Evansville,IN-KY',
25500:'Harrisonburg,VA',
32820:'Memphis,TN-MS-AR',
19660:'Deltona-DaytonaBeach-OrmondBeach,FL',
19740:'Denver-Aurora,CO',
27740:'JohnsonCity,TN',
33740:'Monroe,LA',
13740:'Billings,MT',
14020:'Bloomington,IN',
34740:'Muskegon-NortonShores,MI',
36260:'Ogden-Clearfield,UT',
38940:'PortSt.Lucie-FortPierce,FL',
45300:'Tampa-St.Petersburg-Clearwater,FL',
48540:'Wheeling,WV-OH',
70900:'BarnstableTown,MA',
11700:'Asheville,NC',
12940:'BatonRouge,LA',
27780:'Johnstown,PA',
33780:'Monroe,MI',
41940:'SanJose-Sunnyvale-SantaClara,CA',
46140:'Tulsa,OK',
12060:'Atlanta-SandySprings-Marietta,GA',
14500:'Boulder,CO',
18140:'Columbus,OH',
24860:'Greenville,SC',
26180:'Honolulu,HI',
12100:'AtlanticCity,NJ',
19500:'Decatur,IL',
28100:'Kankakee-Bradley,IL',
28740:'Kingston,NY',
34940:'Naples-MarcoIsland,FL',
12260:'Augusta-RichmondCounty,GA-SC',
24340:'GrandRapids-Wyoming,MI',
30780:'LittleRock-NorthLittleRock,AR',
31140:'Louisville,KY-IN',
43900:'Spartanburg,SC',
49660:'Youngstown-Warren-Boardman,OH',
35620:'NewYork-NorthernNewJersey-LongIsland,NY-NJ-PA',
45820:'Topeka,KS',
11500:'Anniston-Oxford,AL',
29100:'LaCrosse,WI',
11020:'Altoona,PA',
17980:'Columbus,GA-AL',
42260:'Sarasota-Bradenton-Venice,CA',
45220:'Tallahassee,FL',
72850:'Danbury,CT',
19460:'Decatur,AL',
30700:'Lincoln,NE',
33860:'Montgomery,AL',
17900:'Columbia,SC',
74950:'Manchester,NH',
25180:'Hagerstown-Martinsburg,MD-WV',
29340:'LakeCharles,LA',
33100:'Miami-FortLauderdale-MiamiBeach,FL',
40420:'Rockford,IL',
41740:'SanDiego-Carlsbad-SanMarcos,CA',
10740:'Albuquerque,NM',
22900:'FortSmith,AR-OK',
39140:'Prescott,AZ',
40380:'Rochester,NY',
42540:'Scranton-WilkesBarre,PA',
46060:'Tucson,AZ',
46700:'Vallejo-Fairfield,CA',
3160:'Greenville-Spartanburg-Anderson,SCMSA*',
19100:'Dallas-FortWorth-Arlington,TX',
19380:'Dayton,OH',
20740:'EauClaire,WI',
26620:'Huntsville,AL',
39460:'PuntaGorda,FL',
17460:'Cleveland-Elyria-Mentor,OH',
31100:'LosAngeles-LongBeach-SantaAna,CA',
31460:'Madera,CA',
35660:'Niles-BentonHarbor,MI',
42100:'Santa-Cruz-Watsonville,CA',
49420:'Yakima,WA',
28140:'KansasCity,MO-KS',
17820:'ColoradoSprings,CO',
22180:'Fayetteville,NC',
25060:'Gulfport-Biloxi,MS',
26380:'Houma-BayouCane-Thibodaux,LA',
27500:'Janesville,WI',
33460:'Minneapolis-StPaul-Bloomington,MN-WI',
75700:'NewHaven,CT',
15980:'CapeCoral-FortMyers,FL',
18580:'CorpusChristi,TX',
22220:'Fayetteville-Springdale-Rogers,AR-MO',
25420:'Harrisburg-Carlisle,PA',
33700:'Modesto,CA',
28660:'Killeen-Temple-FortHood,TX',
41500:'Salinas,CA',
70750:'Bangor,ME',
45060:'Syracuse,NY',
26580:'Huntington-Ashland,WV-KY-OH',
42340:'Savannah,GA',
33260:'Midland,TX',
47020:'Victoria,TX',
47220:'Vineland-Millville-Bridgeton,NJ',
25860:'Hickory-Morgantown-Lenoir,NC',
78100:'Springfield,MA-CT',
47300:'Visalia-Porterville,CA',
15180:'Brownsville-Harlingen,TX',
17300:'Clarksville,TN-KY',
20500:'Durham,NC',
23420:'Fresno,CA',
27900:'Joplin,MO',
16620:'Charleston,WV',
37900:'Peoria,IL',
40980:'Saginaw-SaginawTownshipNorth,MI',
41540:'Salisbury,MD',
27340:'Jacksonville,NC',
45940:'Trenton-Ewing,NJ',
20940:'ElCentro,CA',
38900:'Portland-Vancouver-Beaverton,OR-WA',
10500:'Albany,GA',
11540:'Appleton,WI',
17020:'Chico,CA',
24540:'Greeley,CO',
39580:'Raleigh-Cary,NC',
17140:'Cincinnati-Middletown,OH-KY-IN',
28700:'Kingsport-Bristol,TN-VA',
36780:'Oshkosh-Neenah,WI',
44220:'Springfield,OH',
22020:'Fargo,ND-MN',
32900:'Merced,CA',
33140:'MichiganCity-LaPorte,IN',
22140:'Farmington,NM',
22460:'Florence,AL',
26980:'IowaCity,IA',
31420:'Macon,,GA',
32580:'McAllen-Edinburg-Pharr,TX',
37980:'Philadelphia-Camden-Wilmington,PA-NJ-DE',
38300:'Pittsburgh,PA',
44700:'Stockton,CA',
14740:'Bremerton-Silverdale,WA',
26900:'Indianapolis,IN',
27260:'Jacksonville,FL',
31340:'Lynchburg,VA',
44060:'Spokane,WA',
47940:'Waterloo-CedarFalls,IA',
11460:'AnnArbor,MI',
24660:'Greensboro-HighPoint,NC',
39540:'Racine,WI',
0:'NotIdentifiedorNonmetropolitan',
6450:'Portsmouth-Rochester,NH-MEMSA*',
29620:'Lansing-EastLansing,MI',
35380:'NewOrleans-Metairie-Kenner,LA',
48140:'Wausau,WI',
49620:'York-Hanover,PA',
16700:'Charleston-NorthCharleston,SC',
16980:'Chicago-Naperville-Joliet,IN-IN-WI',
72400:'Burlington-SouthBurlington,VT',
13780:'Binghamton,NY',
15940:'Canton-Massillon,OH',
16860:'Chattanooga,TN-GA',
36420:'OklahomaCity,OK',
38060:'Phoenix-Mesa-Scottsdale,AZ',
39900:'Reno-Sparks,NV',
42220:'SantaRosa-Petaluma,CA',
47900:'Washington-Arlington-Alexandria,DC-VA-MD-WV',
10420:'Akron,OH',
10500:'Albany,GA',
10580:'Albany-Schenectady-Troy,NY',
10740:'Albuquerque,NM',
10900:'Allentown-Bethlehem-Easton,PA-NJ',
11020:'Altoona,PA',
11100:'Amarillo,TX',
11300:'Anderson,IN',
11340:'Anderson,SC',
11460:'AnnArbor,MI',
11540:'Appleton,WI',
11700:'Asheville,NC',
12220:'Auburn-Opelika,AL',
12260:'Augusta-RichmondCounty,GA-SC',
12420:'Austin-RoundRock,TX',
12540:'Bakersfield,CA',
12580:'Baltimore-Columbia-Towson,MD',
12620:'Bangor,ME',
12700:'Barnstable,MA',
12940:'BatonRouge,LA',
12980:'BattleCreek,MI',
13140:'Beaumont-PortArthur,TX',
13380:'Bellingham,WA',
13460:'Bend-Redmond,OR',
13740:'Billings,MT',
13780:'Binghamton,NY',
13820:'Birmingham-Hoover,AL',
13980:'Blacksburg-Christiansburg-Radford,VA',
14010:'Bloomington,IL',
14020:'Bloomington,IN',
14060:'Bloomington-Normal,IL',
14260:'BoiseCity,ID',
14460:'Boston-Cambridge-Newton,MA-NH',
14500:'Boulder,CO',
14540:'BowlingGreen,KY',
14740:'Bremerton-Silverdale,WA',
14860:'Bridgeport-Stamford-Norwalk,CT',
15180:'Brownsville-Harlingen,TX',
15380:'Buffalo-Cheektowaga-NiagaraFalls,NY',
15500:'Burlington,NC',
15540:'Burlington-SouthBurlington,VT',
15680:'California-LexingtonPark,MD',
15940:'Canton-Massillon,OH',
15980:'CapeCoral-FortMyers,FL',
16060:'Carbondale-Marion,IL',
31080: 'Los Angeles-Long Beach-Anaheim, CA',

# Country

192:'Russia',
214:'Israel',
215:'Japan',
334:'Barbados',
388:'Venezuela',
139:'England',
213:'Iraq',
229:'Pakistan',
343:'Jamaica',
138:'GreatBritain',
387:'Uruguay',
137:'Switzerland',
233:'SaudiArabia',
252:'MiddleEast',
315:'Mexico',
338:'Dominica',
353:'Caribbean',
378:'Chile',
380:'Ecuador',
317:'Panama',
206:'Cambodia',
337:'Cuba',
310:'Belize',
110:'Germany',
222:'Lebanon',
72:'PuertoRico',
216:'Jordan',
156:'Slovakia/SlovakRepublic',
202:'Bangladesh',
377:'Brazil',
427:'Kenya',
180:'USSR',
155:'CzechRepublic',
221:'Laos',
127:'Norway',
184:'Lithuania',
209:'HongKong',
527:'PacificIslands',
555:'Other',
379:'Colombia',
218:'Korea/SouthKorea',
238:'Taiwan',
383:'Guyana',
96:'OutlyingAreasoftheUS(AmericanSamoa,Guam,USVirginIslands,NorthernMarianas,OtherUSTerr)',
340:'Grenada',
130:'Azores',
148:'Europe',
183:'Latvia',
436:'Morocco',
210:'India',
339:'DominicanRepublic',
200:'Afghanistan',
311:'CostaRica',
108:'Finland',
205:'Burma',
333:'Bahamas',
57:'UnitedStates',
117:'Hungary',
195:'Ukraine',
245:'Asia',
415:'Egypt',
514:'NewZealand',
129:'Portugal',
462:'OtherAfrica',
147:'Yugoslavia',
239:'Thailand',
314:'Honduras',
421:'Ghana',
385:'Peru',
468:'NorthAfrica',
105:'Czechoslovakia',
132:'Romania',
142:'NorthernIreland',
304:'NorthAmerica',
106:'Denmark',
240:'Turkey',
116:'Greece',
211:'Indonesia',
126:'Holland/Netherlands',
301:'Canada',
103:'Belgium',
128:'Poland',
376:'Bolivia',
109:'France',
119:'Ireland/Eire',
253:'Palestine',
207:'China',
313:'Guatemala',
342:'Haiti',
136:'Sweden',
102:'Austria',
231:'Philippines',
501:'Australia',
140:'Scotland',
212:'Iran',
300:'Bermuda',
449:'SouthAfrica',
440:'Nigeria',
318:'CentralAmerica',
375:'Argentina',
224:'Malaysia',
312:'ElSalvador',
316:'Nicaragua',
234:'Singapore',
242:'Vietnam',
120:'Italy',
134:'Spain',
389:'SouthAmerica',
417:'Ethiopia',
351:'Trinidad&Tobago',
185:'Armenia',
217:'Korea/SouthKorea',
237:'Syria',
507:'Fiji',
66:'Guam',
73:'PuertoRico',
78:'U.S.VirginIslands',
100:'Albania',
103:'Belgium',
104:'Bulgaria',
106:'Denmark',
110:'Germany',
117:'Hungary',
129:'Portugal',
141:'Wales',
149:'Slovakia',
150:'Bosnia&Herzegovina',
151:'Croatia',
152:'Macedonia',
154:'Serbia',
157:'Lithuania',
158:'Armenia',
159:'Azerbaijan',
160:'Belarus',
161:'Georgia',
162:'Moldova',
163:'Russia',
164:'Ukraine',
165:'USSR',
166:'Europe,notspecified',
167:'Kosovo',
208:'Cyprus',
220:'SouthKorea',
223:'Laos',
226:'Malaysia',
235:'SaudiArabia',
236:'Singapore',
243:'Turkey',
246:'Uzbekistan',
247:'Vietnam',
248:'Yemen',
249:'Asia,notspecified',
303:'Mexico',
321:'AntiguaandBarbuda',
323:'Bahamas',
324:'Barbados',
327:'Cuba',
328:'Dominica',
329:'DominicanRepublic',
330:'Grenada',
332:'Haiti',
341:'TrinidadandTobago',
360:'Argentina',
361:'Bolivia',
362:'Brazil',
363:'Chile',
364:'Columbia',
365:'Ecuador',
368:'Guyana',
369:'Paraguay',
370:'Peru',
372:'Uruguay',
373:'Venezuela',
374:'SouthAmerica,notspecified',
399:'Americas,notspecified',
400:'Algeria',
407:'Cameroon',
408:'CapeVerde',
414:'Egypt',
416:'Ethiopia',
429:'Liberia',
436:'Morocco',
440:'Nigeria',
444:'Senegal',
447:'SierraLeone',
448:'Somalia',
449:'SouthAfrica',
451:'Sudan',
453:'Tanzania',
457:'Uganda',
461:'Zimbabwe',
501:'Australia',
508:'Fiji',
515:'NewZealand',
523:'Tonga',
528:'Oceania,notspecified'

})

app = dash.Dash(__name__)
    
df = data
list_country = list(df['Country'].unique())


app.layout = html.Div(children=[
    html.H1(children='Native Country of Parents Dashboard'),
 
    dcc.Dropdown(id = 'mydropdown',
                 multi = False,
                 clearable = True,
                 disabled = False,
                 style = {'display': True},
                 value = 'Ukraine',
                 placeholder = 'Select Countries',
                 options = [{'label': c, 'value': c}
                            for c in list_country], className = 'dcc_compon'),
    html.P('Select Year', className = 'fix_label', style = {'color': 'white', 'margin-top': '30px'}),
                         
    
    dcc.Slider(id = 'slider_year',
               included = True,
               updatemode='drag',
               tooltip={'always_visible': True},
               min = 2004,
               max = 2019,
               step = 1,
               value = 2010,
               marks = {str(yr): str(yr) for yr in range(2004, 2019, 1)},
               className = 'dcc_compon'),
    html.P('Select Platform', className = 'fix_label', style = {'color': 'white', 'margin-top': '30px'}),
                       
 
            
    
    dcc.Graph(id='graph1')
])
  
@app.callback(
    Output('graph1', 'figure'),
    [Input('mydropdown','value')],
    [Input('slider_year', 'value')]
    
)


def update_graph(select_country,slider_year):

   df2 = df[(df['Country'] == select_country) & (df['Year'] == slider_year)]

   fig = px.bar(df2,
                     x='City',
                     y='Year',
                     labels={'Year':'Population'},
                     title = f'Dashboard in {select_country}',
                     height=700)
   fig.update_layout(xaxis={'categoryorder':'total descending'})
   return fig
    

if __name__ == '__main__':
    app.run_server(debug=True)




